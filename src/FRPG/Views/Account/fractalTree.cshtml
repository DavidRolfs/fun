<style>body {
        background-color: black ;
        color: white ;
        font-family: sans-serif ;
}</style>
<p>A randomly generated fratal tree.</p>
<button onclick="newTree();">new tree</button>
<script src="//production-assets.codepen.io/assets/common/stopExecutionOnTimeout-b2a7b3fe212eaa732349046d8416e00a9dec26eb7fd347590fbced3ab38af52e.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
<script>
    var width = 1200,
    height = 900,
    top = 20,
    left = 20;

    var paper = Raphael(left, top, width, height) ;
    //var paper = Raphael(20, 100, 800, 600);
    var initialPoint = [width / 2, height];

    Raphael.fn.line = function (startX, startY, endX, endY) {
        return this.path('M' + startX + ' ' + startY + ' L' + endX + ' ' + endY);
    };

    // min branch length. recursion stops below this length
    var minBranchLength = 3;

    var fractal = function (startPoint, previousBranchAngle, previousBranchLength, stackDepth) {
        if (stackDepth > 15) {
            return;
        }
        if (previousBranchLength < minBranchLength) {
            return;
        }

        // branch length. with a bit of randomness.
        var randomAngleWidth = 0.4; // the amount of
        var rAngle = (1 + randomAngleWidth * (Math.random() * 2 - 1));
        var branchLength = (a * previousBranchLength + b) * previousBranchLength * rAngle;

        // angle, with a bit of randomness.
        var randomAngleWidth = 0.15;
        var r = 0;
        if (stackDepth !== 0) {
            r = (Math.random() * 2 * randomAngleWidth - randomAngleWidth);
        }
        var branchAngle = previousBranchAngle + r;


        var startX = startPoint[0]
        var startY = startPoint[1];
        var endX = startX + branchLength * Math.cos(branchAngle);
        var endY = startY - branchLength * Math.sin(branchAngle);
        //paper.line( startX, startY,  endX, endY ).attr("stroke-linecap", "round" ) ;
        paper.line(startX, startY, endX, endY)
          .attr("stroke-width", Math.exp(branchLength / 100))
          .attr("stroke-linecap", "round")
          .attr("stroke", strokeColor);

        // the angle each child branch will divert from parent branch (before random variation)
        var childBranchDiversion = Math.PI / 8;

        // recursive step. two child branches.
        fractal([endX, endY], branchAngle - childBranchDiversion, branchLength, stackDepth + 1);
        fractal([endX, endY], branchAngle + childBranchDiversion, branchLength, stackDepth + 1);
    }


    var initialBranchLength = height * 2 / 3;

    // at each recursive step the length of the child branch is some fraction of the parent branch
    // I want the leaf branches to get shorter at a slower rate than earlier branches
    // so I'm multiplying the length of each branch by a linear function which takes input as the length of parent branch
    // y = ax + b. ... y = modifier. x = length of parent branch.
    // maxChange modifier is small, meaning child branches change by more when parentBranchLength is multiplied by this.
    // minChange modifier is larger, so the change of branch length of parent and child branches is less
    // below is maths to work out the linear function.
    var maxChange = 0.4, minChange = 0.75;
    var b = minChange;
    var a = (maxChange - minChange) / initialBranchLength;

    var strokeColor = "white";

    var newTree = function () {
        paper.clear();
        // draw the tree
        fractal(initialPoint, Math.PI / 2, initialBranchLength, 0);

        // draw flat line along bottom.
        paper.line(0.1 * width, height, 0.9 * width, height).attr("stroke-width", 10).attr("stroke", strokeColor);
    }
    newTree();
</script>

